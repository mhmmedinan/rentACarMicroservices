version: '3.8'

services:

  zookeeper:
    image: bitnami/zookeeper
    restart: always
    ports:
     - "2181:2181"
    volumes:
     - "zookeeper_data:/bitnami"
    networks:
     - broker-kafka
    environment:
     - ALLOW_ANONYMOUS_LOGIN=yes
     
  kafka:
    image: bitnami/kafka
    ports:
     - "9092:9092"
    restart: always
    volumes:
     - "kafka_data:/bitnami"
    networks:
     - broker-kafka
    environment:
     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
     - ALLOW_PLAINTEXT_LISTENER=yes
     - KAFKA_LISTENERS=PLAINTEXT://:9092
     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    depends_on:
     - zookeeper
  
  invertorydb: 
    container_name: invertory_db
    image: postgres
    restart: always
    ports:
     - "5434:5432"
    networks:
     - rentacar-network
    environment:
     - POSTGRES_USER=admin
     - POSTGRES_PASSWORD=12345

    volumes:
     - "./pg_data:/var/lib/postgresql/data"

  rentaldb: 
    container_name: rental_db
    image: postgres
    restart: always
    ports:
     - "5435:5432"
    networks:
     - rentacar-network
    environment:
     - POSTGRES_USER=admin
     - POSTGRES_PASSWORD=12345

    volumes:
     - "./pg_data:/var/lib/postgresql/data"

  invoicedb: 
    container_name: invoice_db
    image: postgres
    restart: always
    ports:
     - "5436:5432"
    networks:
     - rentacar-network
    environment:
     - POSTGRES_USER=admin
     - POSTGRES_PASSWORD=12345

    volumes:
     - "./pg_data:/var/lib/postgresql/data"

  paymentdb: 
    container_name: payment_db
    image: postgres
    restart: always
    ports:
     - "5437:5432"
    networks:
     - rentacar-network
    environment:
     - POSTGRES_USER=admin
     - POSTGRES_PASSWORD=12345

    volumes:
     - "./pg_data:/var/lib/postgresql/data"

  filterdb:
    container_name: filter_db
    image: mongo
    restart: always
    ports:
     - "27017:27017"
    volumes:
     - "/data/db/" 
    networks:
     - rentacar-network

  configServer:
    build: ./config-server
    container_name: config_server
    image: config-server-image
    restart: always
    ports:
     - "8888:8888"
    volumes:
     - ./config-server:/app
    networks:
     - rentacar-network
    environment:
     - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://github.com/mhmmedinan/configServer

  discoveryServer:
    build: ./discovery-server
    container_name: discoveryserver
    image: discovery-server-image
    restart: always
    ports:
     - "9001:9001"
    networks:
     - rentacar-network
    volumes:
     - ./discovery-server:/app
  
  apiGateway:
    build: ./apigateway
    container_name: apigateway
    image: api-gateway-image
    restart: always
    ports:
     - "9011:9011"
    volumes:
     - ./apigateway:/app
    networks:
     - rentacar-network
    depends_on:
     - discoveryServer
    environment:
     - EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://discoveryServer:9001/eureka/

  filterservice.api:
   build: ./filterService
   container_name: filterservice.api
   image: filter-service-api
   restart: always
   volumes:
     - ./filterService:/app
   networks:
     - rentacar-network
   depends_on:
     - discoveryServer
     - kafka
   environment:
     - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configServer:8888
     - SPRING_DATA_MONGODB_HOST=filterdb
     - SPRING_DATA_MONGODB_PORT=27017
     - SPRING_DATA_MONGODB_DATABASE=filterservice
     - EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://discoveryServer:9001/eureka/
     - KAFKA.CONSUMER.AUTO-OFFSET-RESET=earliset
     - KAFKA.CONSUMER.BOOTSTRAP-SERVERS=kafka
     - KAFKA.CONSUMER.KEY-DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
     - KAFKA.CONSUMER.PROPERTIES.SPRING.JSON.TRUSTED.PACKAGES='*'
     - KAFKA.CONSUMER.VALUE-DESERIALIZER=org.springframework.kafka.support.serializer.JsonDeserializer
     - KAFKA.TOPIC.NAME=rental_topic2

  invertoryservice.api:
   build: ./invertoryService
   container_name: invertoryservice.api
   image: invertory-service-api
   restart: always
   volumes:
    - ./invertoryService:/app
   depends_on:
    - invertorydb
    - discoveryServer
    - kafka
   networks:
    - rentacar-network
   environment:
    - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configServer:8888
    - SPRING_DATASOURCE_URL=jdbc:postgresql://invertorydb:5432/rentacarinvertorydb
    - SPRING_DATASOURCE_USERNAME=admin
    - SPRING_DATASOURCE_PASSWORD=12345
    - EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://discoveryServer:9001/eureka/
    - KAFKA.CONSUMER.AUTO-OFFSET-RESET=earliset
    - KAFKA.CONSUMER.BOOTSTRAP-SERVERS=kafka
    - KAFKA.CONSUMER.KEY-DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
    - KAFKA.CONSUMER.PROPERTIES.SPRING.JSON.TRUSTED.PACKAGES='*'
    - KAFKA.CONSUMER.VALUE-DESERIALIZER=org.springframework.kafka.support.serializer.JsonDeserializer
    - KAFKA.TOPIC.NAME=rental_topic2
    - KAFKA.PRODUCER.BOOTSTRAP-SERVERS=kafka
    - KAFKA.PRODUCER.KEY-SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
    - KAFKA.PRODUCER.VALUE-SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer

  rentalservice.api:
   build: ./rentalService
   container_name: rentalservice.api
   image: rental-service-api
   restart: always
   volumes:
    - ./rentalService:/app
   depends_on:
    - rentaldb
    - discoveryServer
    - kafka
   networks:
    - rentacar-network
   environment:
    - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configServer:8888
    - SPRING_DATASOURCE_URL=jdbc:postgresql://rentaldb:5432/rentacarrentaldb
    - SPRING_DATASOURCE_USERNAME=admin
    - SPRING_DATASOURCE_PASSWORD=12345
    - EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://discoveryServer:9001/eureka/
    - KAFKA.TOPIC.NAME=rental_topic2
    - KAFKA.PRODUCER.BOOTSTRAP-SERVERS=kafka
    - KAFKA.PRODUCER.KEY-SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
    - KAFKA.PRODUCER.VALUE-SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer

  invoiceservice.api:
   build: ./invoiceService
   container_name: invoiceservice.api
   image: invoice-service-api
   restart: always
   volumes:
    - ./invoiceService:/app
   depends_on:
    - invertorydb
    - discoveryServer
    - kafka
   networks:
    - rentacar-network
   environment:
    - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configServer:8888
    - SPRING_DATASOURCE_URL=jdbc:postgresql://invoicedb:5432/rentacarinvoicedb
    - SPRING_DATASOURCE_USERNAME=admin
    - SPRING_DATASOURCE_PASSWORD=12345
    - EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://discoveryServer:9001/eureka/
    - KAFKA.CONSUMER.AUTO-OFFSET-RESET=earliset
    - KAFKA.CONSUMER.BOOTSTRAP-SERVERS=kafka
    - KAFKA.CONSUMER.KEY-DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
    - KAFKA.CONSUMER.PROPERTIES.SPRING.JSON.TRUSTED.PACKAGES='*'
    - KAFKA.TOPIC.NAME=rental_topic2

  paymentservice.api:
   build: ./payment-service
   container_name: paymentservice.api
   image: payment-service-api
   restart: always
   volumes:
    - ./payment-service:/app
   networks:
    - rentacar-network
   depends_on:
    - invertorydb
    - discoveryServer
    - kafka
   environment:
    - SPRING_CLOUD_CONFIG_IMPORT=configserver:http://configServer:8888
    - SPRING_DATASOURCE_URL=jdbc:postgresql://paymentdb:5432/rentacarpaymentdb
    - SPRING_DATASOURCE_USERNAME=admin
    - SPRING_DATASOURCE_PASSWORD=12345
    - EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://discoveryServer:9001/eureka/
    - KAFKA.TOPIC.NAME=rental_topic2
    - KAFKA.CONSUMER.AUTO-OFFSET-RESET=earliset
    - KAFKA.CONSUMER.BOOTSTRAP-SERVERS=kafka
    - KAFKA.CONSUMER.KEY-DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
    - KAFKA.CONSUMER.PROPERTIES.SPRING.JSON.TRUSTED.PACKAGES='*'

networks:
  rentacar-network:
  broker-kafka:
    driver: bridge 

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local